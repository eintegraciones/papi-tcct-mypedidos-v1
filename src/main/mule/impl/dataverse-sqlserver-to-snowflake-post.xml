<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:java="http://www.mulesoft.org/schema/mule/java" xmlns:xml-module="http://www.mulesoft.org/schema/mule/xml-module" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cloudhub="http://www.mulesoft.org/schema/mule/cloudhub" xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:snowflake="http://www.mulesoft.org/schema/mule/snowflake" xmlns:azure-data-lake-storage="http://www.mulesoft.org/schema/mule/azure-data-lake-storage" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/azure-data-lake-storage http://www.mulesoft.org/schema/mule/azure-data-lake-storage/current/mule-azure-data-lake-storage.xsd
http://www.mulesoft.org/schema/mule/snowflake http://www.mulesoft.org/schema/mule/snowflake/current/mule-snowflake.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/cloudhub http://www.mulesoft.org/schema/mule/cloudhub/current/mule-cloudhub.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/xml-module http://www.mulesoft.org/schema/mule/xml-module/current/mule-xml-module.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">
	<flow name="dataverse-sqlserver-to-snowflake-postFlow" doc:id="b1c524a9-005c-48c0-a873-d93ccfdbf8c5" >
		<flow-ref doc:name="set-current-date" doc:id="f0352659-bb80-4ab9-94d7-01d59ededb71" name="set-current-date"/>
		<set-variable value="556" doc:name="integration_id: 556" doc:id="3db3d4ce-086c-4206-ab98-81a87df5ead2" variableName="integration_id"/>
		<flow-ref doc:name="get-array-of-tables-by-integration_id" doc:id="a7765056-b940-4469-8826-046e9a630789" name="get-array-of-tables-by-integration_id"/>
		<http:request method="GET" doc:name="GET SCHEMA DATAVERSE" doc:id="9681badb-7e11-41cd-a098-3d599865e540" config-ref="Dataverse_HTTP_Request_configuration" path="/dataverse/$metadata" responseTimeout='#[p("timeout.response.get")]' target="xml_dataverse">
			<reconnect frequency="5000" count="3" />
		</http:request>
		<batch:job jobName="dataverse-sqlserver-to-snowflake-postBatch_Job" doc:id="103a81ce-cbcf-4cd3-a19a-7b0aa826bd1f" maxFailedRecords="-1">
			<batch:process-records >
				<batch:step name="Generate_Avro_Schemas" doc:id="178a3f54-6781-49b5-bd23-b97ef0396e2e" >
					<flow-ref doc:name="set-tabla-tablename-schema-and-origin" doc:id="63ff1ea0-b834-4418-8e5c-9e604857d5f0" name="set-tabla-tablename-schema-and-origin" />
					<os:contains doc:name="schema_exists" doc:id="85395913-d65e-4b97-9db4-b94d4ccb8558" target="schema_exists" key="#[vars.tablename]" objectStore="SchemasObject_store"/>
					<choice doc:name="Choice" doc:id="a981da66-e260-44ef-9d0b-21acf4f01063" >
						<when expression="#[vars.schema_exists as Boolean default false]">
							<logger level="TRACE" doc:name="Schema exists" doc:id="598231a7-97a3-4d36-bbac-6cd12f283177" message='#["Schema for table " ++ vars.tablename as String ++ " already exists"]'/>
							
						</when>
						<when expression='#["sqlserver" == vars.origin]'>
							<http:request method="GET" doc:name="GET columns SQLServer" doc:id="8c292354-c2ab-4aac-b9aa-f168404ae559" config-ref="SQLServer_HTTP_Request_configuration" path='#["/sqlserver/" ++ vars.tabla as String ++ "/columns"]' responseTimeout='#[p("timeout.response.get")]' target="json_sqlserver">
								<reconnect frequency="5000" count="3" />
								<http:query-params><![CDATA[#[output application/java
---
{
	"schema" : vars.schema
}]]]></http:query-params>
							</http:request>
							<ee:transform doc:name="Write SQL Server to schema" doc:id="1108e0f8-949d-4b2b-bb0e-088f7f09b658">
								<ee:message>
									<ee:set-payload ><![CDATA[%dw 2.0
output application/java
import java!com::ntt::transformer::AvroSchemaSQLServer
---
AvroSchemaSQLServer::generateSchema(vars.json_sqlserver, vars.tabla)]]></ee:set-payload>
								</ee:message>
								<ee:variables >
								</ee:variables>
							</ee:transform>
							<os:store doc:name="schema" doc:id="f56255f9-ce15-47f2-9f74-8f02436efc4d" key="#[vars.tablename]" objectStore="SchemasObject_store">
							</os:store>
						</when>
						<otherwise >
							<ee:transform doc:name="Write dataverse to schema" doc:id="1f206339-ffd4-449f-81cb-b4b76bb87294" >
								<ee:message >
									<ee:set-payload ><![CDATA[%dw 2.0
output application/java
import java!com::ntt::transformer::AvroSchemaDataverse
---
AvroSchemaDataverse::generateSchema(write(vars.xml_dataverse, "application/xml") as String, vars.tabla)]]></ee:set-payload>
								</ee:message>
								<ee:variables >
								</ee:variables>
							</ee:transform>
							<os:store doc:name="schema" doc:id="aedb9d4d-7012-48d8-985a-54654527062d" key="#[vars.tablename]" objectStore="SchemasObject_store">
							</os:store>
						</otherwise>
					</choice>
					<os:retrieve doc:name="schema" doc:id="b26bfb47-880c-4b36-a511-9d558418f0a1" key="#[vars.tablename]" target="schemafile" objectStore="SchemasObject_store"/>
				</batch:step>
				<batch:step name="Dataverse-sqlserver-to-snowflake" doc:id="7c418dfa-53dd-4674-a2af-e7cf8db266a3" >
					<logger level="INFO" doc:name="tabla being processed" doc:id="5cb1518b-d233-42bc-8329-334c006aba36" message='#["Processing " ++ vars.tabla as String ++ " ============================================================================================================="]'/>
					<flow-ref doc:name="dataverse-sqlserver-to-bronze-Flow" doc:id="c350fb0b-c133-4e94-80d2-7500d0e8bbdb" name="dataverse-sqlserver-to-bronze-Flow"/>
					<flow-ref doc:name="bronze-to-silver-Flow" doc:id="b16ec39f-969d-42cd-8f46-b18aab23f7ce" name="bronze-to-silver-Flow" />
					<flow-ref doc:name="silver-to-gold-Flow" doc:id="c0ccf0c3-663d-4844-8545-8b5c9a30eb78" name="silver-to-gold-Flow" />
					<flow-ref doc:name="gold-to-snowflake-Flow" doc:id="c720c960-840b-4ce4-be73-8ede3c9cf67b" name="gold-to-snowflake-Flow" />
				</batch:step>
				<batch:step name="BatchErrorHandler" doc:id="5c4d11c6-8f0b-4d16-aec1-92e7df180158" acceptPolicy="ONLY_FAILURES">
					<batch:aggregator doc:name="Batch Aggregator" doc:id="a9f3fac9-2f9e-44c5-917c-c586f6782b10" streaming="true">
						<foreach doc:name="For Each" doc:id="cb96dfe2-a204-43af-b8bf-f0afab7acdc3" >
							<set-variable value="#[vars.tablas default [] ++ [vars.tabla default 'empty table error' as String]]" doc:name="tablas" doc:id="a981a72a-792e-47f2-a295-c9ce92c0045f" variableName="tablas"/>
							<set-variable value='#[vars.record_exception default {} ++ &#10;	(vars.record.record.stepExceptions &#10;		mapObject { ($$ ++ "@" ++ vars.tabla): $.message } default {"": ""}&#10;	)]' doc:name="record_exception" doc:id="2c1e5e09-0546-4e11-9d5a-9822cd21f88a" variableName="record_exception"/>
						</foreach>
						<set-variable value='#[vars.record_exception &#10;	pluck ("- Step: " ++ $$ ++ " - " ++ $)&#10;	reduce ($ ++ "\n\n" ++ $$) default ""]' doc:name="step_errors" doc:id="6cb25faa-7c5a-44fb-992c-a646352aa552" variableName="step_errors"/>
						<set-variable value="${app.name}" doc:name="domain_notification" doc:id="8b53570b-2fb4-40b2-8de3-5ab1b999e33c" variableName="domain_notification" />
						<set-variable value='#["ERROR " ++ p("app.name") ++ ": No se pudieron procesar las siguientes tablas: " ++ (vars.tablas joinBy ", ") as String ++ "\n\nDetalle de los errores: " ++ vars.step_errors as String]' doc:name="message_notification" doc:id="fcbc6903-7cef-4cfd-860d-49a7fffb2612" variableName="message_notification" />
						<logger level="INFO" doc:name="Log message notification" doc:id="c4da09e2-7f48-473e-8adf-936193f186b1" message='#[vars.message_notification]' />
						<try doc:name="Try" doc:id="2d7ff03a-abdc-4aab-957e-7ce49cd00bdd" >
							<cloudhub:create-notification doc:name="Create Notification" doc:id="e3f80833-721a-4755-ab1e-65e0832579c5" config-ref="CloudHub_Config" domain="#[vars.domain_notification]">
							<cloudhub:message><![CDATA[#[vars.message_notification]]]></cloudhub:message>
					</cloudhub:create-notification>
							<error-handler >
								<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="311cca2c-1b0c-44fa-a5bb-ade972acfce7" when="#[error.errorType.namespace == 'CLOUDHUB']" >
									<json-logger:logger doc:name="No se pudo enviar la notificación a Cloudhub" doc:id="fadd21fb-6d98-4eb0-85fc-df8b1036cb07" config-ref="JSON_Logger_Config" message="No se pudo enviar la notificación a Cloudhub" tracePoint="EXCEPTION" priority="ERROR" >
										<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: JSONLoggerModule::stringifyNonJSON(error) 
}]]]></json-logger:content>
									</json-logger:logger>
								</on-error-continue>
							</error-handler>
						</try>
					</batch:aggregator>
				</batch:step>
			</batch:process-records>
			<batch:on-complete>
				<json-logger:logger doc:name="END Batch JOB" doc:id="1b57f988-def1-4a06-ba52-e5bd843d37ab" config-ref="JSON_Logger_Config" message="END Batch JOB" tracePoint="END"/>
			</batch:on-complete>
		</batch:job>
		<ee:transform doc:name="Transform Message" doc:id="86200cf7-2502-47d4-b57f-0c88fc5e4db0">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	"response": "Batch Job dataverse-sqlserver-to-snowflake is running"
}]]></ee:set-payload>
					</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[201]]></ee:set-variable>
			</ee:variables>
				</ee:transform>
	</flow>
</mule>
